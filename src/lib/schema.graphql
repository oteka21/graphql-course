enum level {
  easy
  hard
  legend
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person{
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}


type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  level: level
  people: [Student]
}

input CourseInput{
  title: String!
  teacher: String
  description: String!
  topic: String
  level: level
}

input CourseEditInput{
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput{
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput{
  name: String!
  email: String!
  phone: String
  avatar: String
}

type Mutation {
  "Crear un curso"
  createCourse(input: CourseInput!): Course
  "Edita un curso"
  editCourse(
    id: ID!,
    input: CourseEditInput!): Course
  "Crear un persona"
  createPerson(input: PersonInput!): Person
  "Edita una persona"
  editPerson(
    id: ID!,
    input: PersonEditInput!): Person
  "Crea un estudiante en mutation"
  addPeople(
    courseID: ID!,
    studentID: ID!): Course
}

type Query {
  "Devuelve todos los cursos"
  getCourses: [Course]
  "devuelve un curso"
  getCourse(id: ID): Course
    "Devuelve todas las personas"
  getPeople: [Person]
  "devuelve una persona"
  getPerson(id: ID): Person
}
